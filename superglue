#!/usr/bin/env php

<?php

/*
  TODO This needs to be refactored into a proper object, instead of this $GLOBALS crap
  TODO tasks need to be split out into proper objects
*/
$GLOBALS['SG_TASKS'] = array(
  'help' => 'sgTaskHelp',
  'init-project' => 'sgTaskInitProject',
  'cc' => 'sgTaskClearCache',
  'fix-perms' => 'sgTaskFixPermissions',
);

chdir(dirname($_SERVER['PHP_SELF']));
if (sgIsProjectDir() || $argv[1] == 'init-project') {
  if (!isset($argv[1])) {
    sgTaskHelp();
  }
  else if (isset($GLOBALS['SG_TASKS'][$argv[1]])) {
    $GLOBALS['SG_TASKS'][$argv[1]]();
  }
  else {
    sgMessage('Command "' . $argv[1] . '" does not exist. Run "superglue help" to get a list of available commands.');
  }
}
else {
  sgMessage('The Superglue cli can only be run in a project directory.');
}

fputs(STDOUT, "\r\n");


function sgTaskHelp()
{
  $message = "Available commands:";
  foreach ($GLOBALS['SG_TASKS'] as $name => $task) {
    $message .= "\r\n  " . $name;
  }
  sgMessage($message);
}


function sgTaskFixPermissions()
{
  chmod(getcwd() . '/cache', 0777);
  $files = rscandir(getcwd() . '/cache/');
  foreach ($files as $file) {
    sgMessage('chmod 777 ' . $file);
    chmod($file, 0777);
  }
}

function sgTaskClearCache()
{
  $files = rscandir(getcwd() . '/cache/');
  foreach ($files as $file) {
    if (is_file($file)) {
      sgMessage('Removing: ' . $file);
      unlink($file);
    }
  }
}

function sgTaskInitProject()
{
  $targetDir = realpath($_SERVER['PWD']);
  $scriptDir = realpath(dirname(__FILE__));
  
  if (file_exists($targetDir . '/superglue')) {
    sgMessage('A project already exists in this directory.');
    return;
  }
  
  sgConfirm('Are you sure you want to initialize a new project in "' . $targetDir .'"?');
  
  sgMessage('Initializing project...');
  mkdir($targetDir . '/config', 0755);
  mkdir($targetDir . '/cache', 0777);
  chmod($targetDir . '/cache', 0777);
  mkdir($targetDir . '/cache/templates', 0777);
  chmod($targetDir . '/cache/templates', 0777);
  mkdir($targetDir . '/models', 0755);
  mkdir($targetDir . '/controllers', 0755);
  mkdir($targetDir . '/views', 0755);
  mkdir($targetDir . '/web', 0755);
  copy($scriptDir . '/skeleton/web/htaccess-dist', $targetDir . '/web/.htaccess');
  copy($scriptDir . '/skeleton/web/index.php-dist', $targetDir . '/web/index.php');
  copy($scriptDir . '/skeleton/config/ProjectConfiguration.class.php-dist', $targetDir . '/config/ProjectConfiguration.class.php');
  copy($scriptDir . '/skeleton/config/config.php-dist', $targetDir . '/config/config.php');
  copy($scriptDir . '/skeleton/config/routing.php-dist', $targetDir . '/config/routing.php');
  symlink(rel_path(realpath(__FILE__), $targetDir), $targetDir . '/superglue');
  chmod($targetDir . '/superglue', 0755);
  sgMessage('Finished initializing project.');
}

// relative path function by Santosh Patnaik (http://www.php.net/manual/en/function.realpath.php#77203)
function rel_path($dest, $root = '', $dir_sep = '/')
{
 $root = explode($dir_sep, $root);
 $dest = explode($dir_sep, $dest);
 $path = '.';
 $fix = '';
 $diff = 0;
 for($i = -1; ++$i < max(($rC = count($root)), ($dC = count($dest)));)
 {
  if(isset($root[$i]) and isset($dest[$i]))
  {
   if($diff)
   {
    $path .= $dir_sep. '..';
    $fix .= $dir_sep. $dest[$i];
    continue;
   }
   if($root[$i] != $dest[$i])
   {
    $diff = 1;
    $path .= $dir_sep. '..';
    $fix .= $dir_sep. $dest[$i];
    continue;
   }
  }
  elseif(!isset($root[$i]) and isset($dest[$i]))
  {
   for($j = $i-1; ++$j < $dC;)
   {
    $fix .= $dir_sep. $dest[$j];
   }
   break;
  }
  elseif(isset($root[$i]) and !isset($dest[$i]))
  {
   for($j = $i-1; ++$j < $rC;)
   {
    $fix = $dir_sep. '..'. $fix;
   }
   break;
  }
 }
  return $path. $fix;
}

// based on recursive scandir() by webmaster at asylum-et dot com (http://www.php.net/manual/en/function.scandir.php#84638)
function rscandir($base='', $includeHidden = false, &$data=array()) {
  if (substr($base, -1) !== '/') {
    $base .= '/';
  }
  $array = array_diff(scandir($base), array('.', '..'));
  foreach($array as $value) {
    if (!is_link($base.$value) && ($includeHidden || strpos(pathinfo($base.$value, PATHINFO_BASENAME), '.') !== 0)) {
      if (is_dir($base.$value)) {
        $data[] = $base.$value.'/';
        $data = rscandir($base.$value.'/', $includeHidden, $data);
      }
      elseif (is_file($base.$value)) {
        $data[] = $base.$value;
      }
    }
  }
  
  return $data;
}

function sgIsProjectDir()
{
  if (file_exists(getcwd() . '/config/ProjectConfiguration.class.php')) {
    return true;
  }
  
  return false;
}

/*
  TODO add ANSI color support
*/
function sgMessage($string)
{
  fputs(STDOUT, $string . "\r\n");
}

function sgConfirm($string)
{
  sgMessage($string . ' (y/N)');
  $confirm = fgets(STDIN);
  fputs(STDOUT, "\r\n");
  if (trim($confirm) == 'y') {
    return true;
  }
  fputs(STDOUT, 'Cancelled.' . "\r\n\r\n");
  exit(0);
}
